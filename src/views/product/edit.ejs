<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sunting Produk</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/css/bootstrap.min.css" integrity="sha384-TX8t27EcRE3e/ihU7zmQxVncDAy5uIKz4rEkgIXeMed4M0jlfIDPvg6uqKI2xXr2" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/simplePagination.css">
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <%- include("../partials/navbar.ejs") -%>
    <div class="container my-5">
        <h1 class="mb-3">Sunting Produk</h1>
        <form method="post">
            <div class="form-group row">
                <label for="code" class="col-12 col-md-3 col-form-label">Kode produk</label>
                <div class="col-9">
                    <input class="form-control input-code" type="text" name="code" id="code" placeholder="Contoh: 000001">
                    <div class="invalid-feedback" id="codeError"></div>
                </div>
            </div>
            <div class="form-group row">
                <label for="name" class="col-12 col-md-3 col-form-label">Nama produk</label>
                <div class="col-9">
                    <input class="form-control" type="text" name="name" id="name" placeholder="Contoh: beras">
                    <div class="invalid-feedback" id="nameError"></div>
                </div>
            </div>
            <div class="form-group row">
                <label for="qty" class="col-12 col-md-3 col-form-label">Stok</label>
                <div class="col-9">
                    <input class="form-control input-stock" type="text" id="qty" name="qty" placeholder="Contoh: 10">
                    <small class="form-text text-muted">Jumlah stok mengikuti berdasarkan satuan terkecil</small>
                    <div class="invalid-feedback" id="qtyError"></div>
                </div>
            </div>
            <div class="form-group row">
                <label for="storageType" class="col-12 col-md-3 col-form-label">Lokasi penyimpanan</label>
                <div class="col-9">
                    <select class="custom-select input-select" name="storageType" id="storageType">
                        <option value="" hidden="true">- Pilih -</option>
                        <option value="store">Toko</option>
                        <option value="warehouse">Gudang</option>
                    </select>
                    <div class="invalid-feedback" id="storageTypeError"></div>
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-12 col-md-3 mb-3 mb-md-0">Varian</div>
                <div class="col-12 col-md-9" id="variant"></div>
            </div>
            <button type="submit" class="btn btn-success">Simpan perubahan</button>
            <button id="showDeleteDialogBtn" type="button" class="btn btn-danger ml-2">Hapus produk</button>
            <a href="/product" class="btn btn-secondary ml-2">Kembali</a>
        </form>
    </div>

    <div class="modal fade" id="deleteProductVariantModal" tabindex="-1" aria-labelledby="deleteVariantModal" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="exampleModalLabel">Hapus varian</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Apakah Anda yakin menghapus varian?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Tidak</button>
                    <button name="deleteProductVariantBtn" type="button" class="btn btn-danger">Ya</button>
                </div>
            </div>
        </div>
    </div>

    <div class="modal fade" id="deleteProductModal" tabindex="-1" aria-labelledby="deleteProductModal" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Hapus produk</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Apakah Anda yakin menghapus produk?
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Tidak</button>
                    <button id="deleteProductBtn" type="button" class="btn btn-danger">Ya</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.3/dist/js/bootstrap.min.js"></script>
    <script src="/js/jquery.simplePagination.js"></script>
    <script src="/js/helper.js"></script>
    <script>
        let productVariantData = [];
        let removedProductVariantData = [];
        let errors = null;

        $("document").ready(function() {
            const id = "<%=id%>";
            if (!id) window.location.href = "/product"; 
            fetchData(id);
            initSaveUpdate();
            initDeleteProductVariant();
        });

        function getProductVariantsUnit(productVariants, index) {
            return productVariants
                .map((varian, idx) => {
                    return {label: varian.unit, value: idx, selected: varian.childIndex}
                })
                .filter(unit => unit.value !== index);
        }

        function fetchData(id) {
            $.ajax({
                method: "get",
                url: "/api/product/" + id,
                contentType: "application/json",
                success: function(result) {
                    const data = result.data;
                    $("#code").val(data.code);
                    $("#name").val(data.name);
                    $("#qty").val(data.qty);
                    $("#storageType").val(data.storageType);

                    let productVariantTemp = [];
                    for (let i = 0; i < data.productVariant.length; i++) {
                        const item = data.productVariant[i];
                        if (!item.deletedAt) {
                            let childIndex = "";
                            if (item.child) {
                                for (let j = 0; j < data.productVariant.length; j++) {
                                    const checkItem = data.productVariant[j];
                                    if (checkItem.child && item.child && (item.child.id === checkItem.child.id) ) {
                                        childIndex = j + 1;
                                        break;
                                    } else {
                                        childIndex = "";
                                    }
                                }
                            }

                            productVariantTemp.push({
                                id: item.id,
                                price: item.price,
                                qtyPerUnit: item.qtyPerUnit,
                                unit: item.unit,
                                childIndex: childIndex,
                                isParent: item.isParent ? "1" : "0"
                            });
                        }
                    }
                    productVariantData = productVariantTemp;
                    renderProductVariant(productVariantData);
                }, error: function(error) {
                    console.log(error);
                }
            });
        }

        function renderProductVariant(productVariants) {
            const el = $("#variant");
            el.html("");
            productVariants.forEach((productVariant, index) => {
                console.log(productVariant.isParent === "1")
                if (!productVariant.deletedAt) {
                    el.append(
                        '<div id="productVariants['+index+']" class="border rounded py-2 px-3 w-100 mb-3">' +
                            '<div class="mb-3 font-weight-bold">Variant ke-'+(index + 1)+'</div>' +
                            '<div class="form-group row">' +
                                '<label for="price" class="col-md-5 col-form-label">Harga (Rp)</label>' +
                                '<div class="col-md-7">' +
                                    '<input class="form-control" type="text" name="price['+index+']" id="price['+index+']" placeholder="Contoh: 10000" value="'+moneyFormat(productVariant.price)+'" data-key="price" data-index="'+index+'" data-numberonly="true" data-moneyformat="true" onchange="onChangeProductVariantInput(this)">' +
                                    '<div class="invalid-feedback" id="priceError-'+index+'"></div>' +
                                '</div>' +
                            '</div>' +
                            '<div class="form-group row">' +
                                '<label for="unit['+index+']" class="col-md-5 col-form-label">Satuan</label>' +
                                '<div class="col-md-7">' +
                                    '<input class="form-control input-unit" type="text" name="unit['+index+']" id="unit['+index+']" placeholder="Contoh: bungkus" value="'+productVariant.unit+'" data-key="unit" data-index="'+index+'" onchange="onChangeProductVariantInput(this)">' +
                                    '<div class="invalid-feedback" id="unitError-'+index+'"></div>' +
                                '</div>' +
                            '</div>' +
                            '<div class="form-group row" id="unitArea-'+index+'">' +
                                '<label for="qtyPerUnit['+index+']" class="col-md-5 col-form-label">Jumlah per satuan</label>' +
                                '<div class="col-md-7">' +
                                    '<div style="width: 200px" class="d-flex">' +
                                        '<div class="col-md-4 pl-0 pr-0">' +
                                            '<input class="form-control" type="text" name="qtyPerUnit['+index+']" id="qtyPerUnit['+index+']" placeholder="Contoh: 10" value="'+productVariant.qtyPerUnit+'" data-key="qtyPerUnit" data-index="'+index+'" data-numberonly="true" onchange="onChangeProductVariantInput(this)">' +
                                            '<div class="invalid-feedback" id="qtyPerUnitError-'+index+'"></div>' +
                                        '</div>' +
                                        '<div class="col-md-8 pr-0">'+
                                            '<select class="custom-select childIndex" name="childIndex['+index+']" id="childIndex['+index+']" data-key="childIndex" data-index="'+index+'" onchange="onChangeProductVariantInput(this)">' +
                                            '</select>' +
                                            '<div class="invalid-feedback" id="childIndexError-'+index+'"></div>' +
                                        '</div>' +
                                    '</div>' +
                                '</div>' +
                            '</div>' +
                            '<div class="form-group row">' +
                                '<label for="isParent['+index+']" class="col-md-5 col-form-label">Satuan terbesar</label>' +
                                '<div class="col-md-7">' +
                                    '<div class="form-check form-check-inline mt-2">' +
                                          '<input class="form-check-input" type="radio" name="isParent['+index+']" id="isParentTrue['+index+']" value="1" data-key="isParent" data-index="'+index+'" onchange="onChangeProductVariantInput(this)" '+(productVariant.isParent === "1" ? "checked" : null)+'>' +
                                          '<label class="form-check-label" for="isParentTrue['+index+']">Ya</label>' +
                                    '</div>' +
                                    '<div class="form-check form-check-inline mt-2">' +
                                          '<input class="form-check-input" type="radio" name="isParent['+index+']" id="isParentFalse['+index+']" value="0" data-key="isParent" data-index="'+index+'" onchange="onChangeProductVariantInput(this)" '+(productVariant.isParent === "0" ? "checked" : null)+'>' +
                                          '<label class="form-check-label" for="isParentFalse['+index+']">Tidak</label>' +
                                    '</div>' +
                                    '<div class="invalid-feedback" id="isParentError-'+index+'"></div>' +
                                '</div>' +
                            '</div>' +
                            '<button name="showDeleteProductVariantDialog" data-index="'+index+'" type="button" class="btn btn-danger">Hapus varian</button>' +
                        '</div>'
                    );
                }
            });

            renderAddVariant();
            initShowDeleteProductVariantDialog();
            initAllowNumberOnly();
            initMoneyFormat();
            setVariantsUnit();
        }

        function renderAddVariant() {
            const el = $("#variant");
            el.append(
                '<button type="button" class="btn btn-primary" id="addProduct">Tambah varian</button>'
            );

            initAddProductVariant();
        }

        function initAddProductVariant() {
            $("#addProduct").click(function() {
                addProductVariant();
            });
        }

        function addProductVariant() {
            productVariantData.push({
                id: null,
                price: "",
                qtyPerUnit: "",
                unit: "",
                childIndex: "",
                isParent: "0"
            });

            renderProductVariant(productVariantData)
        }

        function initShowDeleteProductVariantDialog() {
            $("button[name=showDeleteProductVariantDialog]").click(function() {
                const dataIndex = $(this).data("index");
                $("#deleteProductVariantModal").modal("show");
            });
        }

        function initDeleteProductVariant() {
            $("button[name=deleteProductVariantBtn]").click(function() {
                const dataIndex = $(this).data("index");
                const productVariant = productVariantData.splice(dataIndex, 1);
                
                if (productVariant[0].id) {
                    $.ajax({
                        method: "delete",
                        url: "/api/product-detail/" + productVariant[0].id,
                        success: function(result) {
                            renderProductVariant(productVariantData);                            
                            alert("Varian terhapus");
                        },
                        error: function(error) {
                            console.log(error);
                        }
                    });
                } else {
                    renderProductVariant(productVariantData);
                }

                if (productVariantData.length === 0) {
                    addProductVariant();
                }

                $("#deleteProductVariantModal").modal("hide");
            });
        }

        function setVariantsUnit() {
            $(".childIndex").each((index, child) => {
                const units = getProductVariantsUnit(productVariantData, index)
                let selectedValue = productVariantData[index].childIndex;
                $(child).empty();
                const availableValues = [];
                const currentUnit = $("input[name='unit["+index+"]']").val() || productVariantData[index]["unit"];
                units.forEach(unit => {
                    const variant = unit.label === "" ? "Variant " + (unit.value+1) : unit.label;
                    child.append(new Option(
                        variant + "/" + currentUnit, 
                        unit.value
                    ));
                    availableValues.push(unit.value);
                })
                child.append(new Option("Tidak ada", ""))
                const found = availableValues.findIndex(v => v == selectedValue);
                if(found === -1) {
                    selectedValue = "";
                }
                $(child).val(selectedValue);
            })
        }

        function initSaveUpdate() {
            $("form").submit(function(e) {
                e.preventDefault();
                let productVariants = [];
                for (let i = 0; i < productVariantData.length; i++) {
                    productVariants.push({
                        ...productVariantData[i],
                        price: productVariantData[i].price
                    });
                }
                
                $.ajax({
                    method: "put",
                    url: "/api/product/<%=id%>",
                    data: {
                        code: $("#code").val(),
                        name: $("#name").val(),
                        storageType: $("#storageType").val(),
                        qty: $("#qty").val(),
                        storageType: $("#storageType").val(),
                        productVariants: productVariants
                    },
                    success: function(result) {
                        $("input").removeClass("is-invalid");
                        $("select").removeClass("is-invalid");
                        alert("Perubahan tersimpan");
                    },
                    error: function(error) {
                        errors = error.responseJSON.errors;
                        renderError();
                        alert("Perubahan gagal disimpan!");
                    }
                });
            });
        }

        function renderError() {
            if (errors) {
                if (errors.hasOwnProperty("code")) {
                    const msg = errors.code;
                    $("#codeError").text(msg);
                    $("#code").addClass("is-invalid")
                } else {
                    $("#code").removeClass("is-invalid");
                }

                if (errors.hasOwnProperty("name")) {
                    const msg = errors.name;
                    $("#nameError").text(msg);
                    $("#name").addClass("is-invalid")
                } else {
                    $("#name").removeClass("is-invalid");
                }

                if (errors.hasOwnProperty("qty")) {
                    const msg = errors.qty;
                    $("#qtyError").text(msg);
                    $("#qty").addClass("is-invalid");
                } else {
                    $("#qtyError").text("");
                    $("#qty").removeClass("is-invalid");
                }

                if (errors.hasOwnProperty("storageType")) {
                    const msg = errors.storageType;
                    $("#storageTypeError").text(msg);
                    $("#storageType").addClass("is-invalid");
                } else {
                    $("#storageTypeError").text("");
                    $("#storageType").removeClass("is-invalid");
                }

                if (errors.hasOwnProperty("productVariants")) {
                    $("#variant").html('<div class="invalid-feedback d-block" id="productVariantError">'+errors.productVariants+'</div>');
                    renderAddVariant();
                } else {
                    $("#productVariantError").remove();
                }

                productVariantData.forEach((productVariant, index) => {
                    if (errors.hasOwnProperty("productVariants["+index+"].price")) {                        
                        const msg = errors["productVariants["+index+"].price"];
                        $("#priceError-"+index+"").html(msg);
                        $("input[name='price["+index+"]']").addClass("is-invalid");
                    } else {
                        $("input[name='price["+index+"]']").removeClass("is-invalid");
                    }

                    if (errors.hasOwnProperty("productVariants["+index+"].qtyPerUnit")) {
                        const msg = errors["productVariants["+index+"].qtyPerUnit"];
                        $("#qtyPerUnitError-"+index).text(msg);
                        $("input[name='qtyPerUnit["+index+"]']").addClass("is-invalid")
                    } else {
                        $("#qtyPerUnitError-"+index).text("");
                        $("input[name='qtyPerUnit["+index+"]']").removeClass("is-invalid");
                    }

                    if (errors.hasOwnProperty("productVariants["+index+"].unit")) {
                        const msg = errors["productVariants["+index+"].unit"];
                        $("#unitError-"+index).text(msg);
                        $("input[name='unit["+index+"]']").addClass("is-invalid")
                    } else {
                        $("#unitError-"+index).text("");
                        $("input[name='unit["+index+"]']").removeClass("is-invalid");
                    }

                    if (errors.hasOwnProperty("productVariants["+index+"].isParent")) {
                        const msg = errors["productVariants["+index+"].isParent"];
                        $("#isParentError-"+index).text(msg);
                        $("input[name='isParent["+index+"]']").addClass("is-invalid");
                    } else {
                        $("#isParentError-"+index).text("");
                        $("input[name='isParent["+index+"]']").removeClass("is-invalid");
                    }

                    if (errors.hasOwnProperty("productVariants["+index+"].childIndex")) {
                        const msg = errors["productVariants["+index+"].childIndex"];
                        $("#childIndexError-"+index).text(msg);
                        $("input[name='childIndex["+index+"]']").addClass("is-invalid");
                    } else {
                        $("#childIndexError-"+index).text("");
                        $("input[name='childIndex["+index+"]']").removeClass("is-invalid");
                    }
                });
            }
        }

        function onChangeProductVariantInput(e) {
            const el = $(e);
            const key = el.data("key");
            const value = el.val();
            const index = el.data("index");
            productVariantData[index][key] = value;
            setVariantsUnit();
        }

        function initDeleteProduct() {
            $("#showDeleteDialogBtn").click(function() {
                $("#deleteProductModal").modal("show");
            });

            $("#deleteProductBtn").click(function() {
                deleteProduct();
            });
        }
        initDeleteProduct();

        function deleteProduct() {
            $.ajax({
                method: "delete",
                url: "/api/product/<%=id%>",
                success: function(result) {
                    $("#deleteProductModal").modal("hide");
                    alert("Produk berhasil dihapus");
                    window.location.href = "/product";
                },
                error: function(error) {
                    console.log(error);
                }
            });
        }
    </script>
</body>
</html>